#!/usr/bin/env python
import warnings

warnings.filterwarnings("ignore", category=UserWarning)

import logging
import os
from collections import deque
from typing import Generator

from sentient_util import logger
import numpy as np
import util
from constants import noop
from dateutil.parser import parse
from mongo_bulk_insert import MongoBulkInsert
from pymongo import MongoClient
from datetime import timedelta
from datetime import datetime
from sortedcontainers import SortedDict
from sentient_util.constants import BITTREX_EPOCH_BOUNDARY

START_RANGE = parse("2021-09-01")
END_RANGE = START_RANGE + timedelta(days=31)
DEPTH = 15
LOG_INTERVAL = 200

primary_mongo = MongoClient(host=os.environ["MONGODB"])
derived_history_db = primary_mongo["derived-history"]
recovered_orderbooks = derived_history_db["V3-recovered-orderbooks"]


class TrimOrderbooks(MongoBulkInsert):

    query_header = {
        "e": 0,
        "x": "bittrex",
        "m": "btc-ada",
    }

    def __init__(self):

        # Create the target collection to receive the trimmed orderbooks
        if START_RANGE < BITTREX_EPOCH_BOUNDARY:
            self.trimmed_orderbooks = primary_mongo["derived-history"][
                "trimmed-orderbooks-V1"
            ]
            self.trimmed_orderbooks.create_index(
                [("e", 1), ("x", 1), ("m", 1), ("ts", 1), ("S", 1)], unique=True,
            )
        else:
            self.trimmed_orderbooks = primary_mongo["derived-history"][
                "trimmed-orderbooks-V3"
            ]
            self.trimmed_orderbooks.create_index(
                [("e", 1), ("x", 1), ("m", 1), ("ts", 1), ("S", 1)], unique=True,
            )

        super().__init__(self.trimmed_orderbooks, bulk_insert_interval=200)

        self.cursor = recovered_orderbooks.find(
            self.query_header
            | {"$and": [{"ts": {"$gte": START_RANGE}}, {"ts": {"$lt": END_RANGE}}]},
            no_cursor_timeout=True,
        )

    def generator(self) -> Generator:

        while (orderbook := next(self.cursor)) :
            orderbook["buy"] = util.apply_depth(
                DEPTH, np.array(orderbook["buy"])
            ).tolist()
            orderbook["sell"] = util.apply_depth(
                DEPTH, np.array(orderbook["sell"])
            ).tolist()
            yield orderbook


if __name__ == "__main__":

    logger.setup()

    orderbooks_consumed = 0

    def log(orderbook):
        logging.warning(
            f"Trimmed: {orderbooks_consumed:4}, ({orderbook['ts'].isoformat('T', 'seconds')})"
        )

    try:

        with TrimOrderbooks() as trim_orderbooks:

            while bool(orderbook := next(trim_orderbooks.generator())):

                trim_orderbooks + orderbook

                orderbooks_consumed += 1
                log(orderbook) if orderbooks_consumed % LOG_INTERVAL == 0 else noop()

    except RuntimeError:  # Stop Iteration
        pass

    finally:
        logging.warning("✨That's✨All✨Folks✨")

