#!/usr/bin/env python
import torch
from constants import DEVICE, EVALUATE_STATE_SIZE
from dqn.dqn_network import DqnNetwork


def compare_models(model1, model2) -> bool:

    print(f"model1\n{[i for i in model1.parameters()]}")
    print(f"model2\n{[i for i in model2.parameters()]}")

    for p1, p2 in zip(model1.parameters(), model2.parameters()):
        if p1.data.ne(p2.data).sum() > 0:
            return False
    return True


def main() -> None:

    checkpoint = torch.load("./networks/btc-snt/DQN/evaluate/read-part.pt")
    local1_model = DqnNetwork(EVALUATE_STATE_SIZE, 2,).to(DEVICE)
    DqnNetwork(EVALUATE_STATE_SIZE, 2,).to(DEVICE)
    local1_model.load_state_dict(checkpoint["local_state_dict"])

    checkpoint = torch.load("./networks/btc-snt/DQN/evaluate/read-full.pt")
    local2_model = DqnNetwork(EVALUATE_STATE_SIZE, 2,).to(DEVICE)
    DqnNetwork(EVALUATE_STATE_SIZE, 2,).to(DEVICE)
    local2_model.load_state_dict(checkpoint["local_state_dict"])

    if compare_models(local1_model, local2_model):
        print("model1 == model2")
    else:
        print("model1 != model2")


if __name__ == "__main__":

    main()
    print("That's All Folks")
